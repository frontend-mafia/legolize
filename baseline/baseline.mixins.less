//********************************************
//	Legolize baseline - mixins
//********************************************/

// -------------------- Font --------------------
.line-height(@units) when not (ispixel(@units)) {
	line-height: @baseline * @units;
}

.line-height(@units) when (ispixel(@units)) {
	line-height: @baseline * (round(@units / @baseline));
}

.font-size(@units) when not (ispixel(@units)) {
	font-size: @baseline * @units;
}

.font-size(@units) when (ispixel(@units)) {
	font-size: @baseline * (round(@units / @baseline));
}

.lineHeight-calculated(@fontSize, @baseline: @baseline, @increaseUnitsBy: 0) {
	line-height: @baseline * (ceil(@fontSize / @baseline) + @increaseUnitsBy);
}

.make-textSize(@fontSize) {
	font-size: @fontSize;
	.lineHeight-calculated(@fontSize);
}

// -------------------- Dimensions --------------------
.height(@units) when not (ispixel(@units)) {
	height: @baseline * @units;
}

.height(@units) when (ispixel(@units)) {
	height: @baseline * (round(@units / @baseline));
}

.min-height(@units) when not (ispixel(@units)) {
	min-height: @baseline * @units;
}

.min-height(@units) when (ispixel(@units)) {
	min-height: @baseline * (round(@units / @baseline));
}

.max-height(@units) when not (ispixel(@units)) {
	max-height: @baseline * @units;
}

.max-height(@units) when (ispixel(@units)) {
	max-height: @baseline * (round(@units / @baseline));
}

.min-width(@units) when not (ispixel(@units)) {
	min-width: @baseline * @units;
}

.min-width(@units) when (ispixel(@units)) {
	min-width: @baseline * (round(@units / @baseline));
}

.max-width(@units) when not (ispixel(@units)) {
	max-width: @baseline * @units;
}

.max-width(@units) when (ispixel(@units)) {
	max-width: @baseline * (round(@units / @baseline));
}

.width(@units) when not (ispixel(@units)) {
	width: @baseline * @units;
}

.width(@units) when (ispixel(@units)) {
	width: @baseline * (round(@units / @baseline));
}

// -------------------- Margin --------------------
.margin(@units) when not (ispixel(@units)) {
	margin: @baseline * @units;
}

.margin(@units) when (ispixel(@units)) {
	margin: @baseline * (round(@units / @baseline));
}

.margin-top(@units) when not (ispixel(@units)) {
	margin-top: @baseline * @units;
}

.margin-top(@units) when (ispixel(@units)) {
	margin-top: @baseline * (round(@units / @baseline));
}

.margin-bottom(@units) when not (ispixel(@units)) {
	margin-bottom: @baseline * @units;
}

.margin-bottom(@units) when (ispixel(@units)) {
	margin-bottom: @baseline * (round(@units / @baseline));
}

// -------------------- Padding --------------------
.padding(@units) when not (ispixel(@units)) {
	padding: @baseline * @units;
}

.padding(@units) when (ispixel(@units)) {
	padding: @baseline * (round(@units / @baseline));
}

.padding-top(@units) when not (ispixel(@units)) {
	padding-top: @baseline * @units;
}

.padding-top(@units) when (ispixel(@units)) {
	padding-top: @baseline * (round(@units / @baseline));
}

.padding-bottom(@units) when not (ispixel(@units)) {
	padding-bottom: @baseline * @units;
}

.padding-bottom(@units) when (ispixel(@units)) {
	padding-bottom: @baseline * (round(@units / @baseline));
}

.padding-left(@units) when not (ispixel(@units)) {
	padding-left: @baseline * @units;
}

.padding-left(@units) when (ispixel(@units)) {
	padding-left: @baseline * (round(@units / @baseline));
}

.padding-right(@units) when not (ispixel(@units)) {
	padding-right: @baseline * @units;
}

.padding-right(@units) when (ispixel(@units)) {
	padding-right: @baseline * (round(@units / @baseline));
}

// -------------------- Position --------------------
.top(@units) when not (ispixel(@units)) {
	top: (@baseline * @units);
}

.top(@units) when (ispixel(@units)) {
	top: @baseline * (round(@units / @baseline));
}

.bottom(@units) when not (ispixel(@units)) {
	bottom: (@baseline * @units);
}

.bottom(@units) when (ispixel(@units)) {
	bottom: @baseline * (round(@units / @baseline));
}

.left(@units) when not (ispixel(@units)) {
	left: (@baseline * @units);
}

.left(@units) when (ispixel(@units)) {
	left: @baseline * (round(@units / @baseline));
}

.right(@units) when not (ispixel(@units)) {
	right: (@baseline * @units);
}

.right(@units) when (ispixel(@units)) {
	right: @baseline * (round(@units / @baseline));
}